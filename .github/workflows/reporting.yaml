---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: "📊 Project Reports"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  schedule:
    # Run every Monday at 7:00 AM UTC
    - cron: '0 7 * * 1'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  verify:
    name: "Verify Configuration"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.parse-projects.outputs.matrix }}
    steps:
      # Harden the runner used by this workflow
      # yamllint disable-line rule:line-length
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: 'audit'

      - name: "Checkout repository"
        # yamllint disable-line rule:line-length
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Verify PROJECTS_JSON variable content"
        shell: bash
        run: |
          if [ -z "${{ vars.PROJECTS_JSON }}" ]; then
            echo "::error::PROJECTS_JSON variable is not set"
            exit 1
          fi

          echo "PROJECTS_JSON variable exists"
          echo "Raw content: ${{ vars.PROJECTS_JSON }}"

      - name: "Parse and validate JSON structure"
        id: parse-projects
        shell: bash
        run: |
          # Parse PROJECTS_JSON and verify structure
          projects_json='${{ vars.PROJECTS_JSON }}'

          # Validate JSON syntax
          if ! echo "$projects_json" | jq . > /dev/null 2>&1; then
            echo "::error::PROJECTS_JSON contains invalid JSON"
            exit 1
          fi

          # Validate required fields exist
          if ! echo "$projects_json" | jq -e 'type == "array"' > /dev/null; then
            echo "::error::PROJECTS_JSON must be an array"
            exit 1
          fi

          # Check each project has required fields
          if ! echo "$projects_json" | \
            jq -e 'all(.project and .gerrit)' > /dev/null; then
            echo "::error::Each project must have 'project' and 'gerrit' fields"
            exit 1
          fi

          # Count projects
          project_count=$(echo "$projects_json" | jq '. | length')
          echo "Found $project_count project(s) to process"

          # Create matrix for parallel execution
          matrix=$(echo "$projects_json" | jq -c '{include: .}')
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

          {
            echo "## Configuration Validation ✅"
            echo "- **Projects found:** $project_count"
            echo "- **JSON structure:** Valid"
            echo ""
            echo "### Projects:"
          } >> "$GITHUB_STEP_SUMMARY"
          echo "$projects_json" | \
            jq -r '.[] | "- **\(.project):** \(.gerrit)"' >> \
            "$GITHUB_STEP_SUMMARY"

  analyze:
    name: "${{ matrix.project }}"
    needs: verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.verify.outputs.matrix) }}
    steps:
      # Harden the runner used by this workflow
      # yamllint disable-line rule:line-length
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: 'audit'

      - name: "Checkout repository"
        # yamllint disable-line rule:line-length
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: "Clone Gerrit repositories for ${{ matrix.project }}"
        # Temporarily use fork until merged upstream
        # yamllint disable-line rule:line-length
        uses: modeseven-lfreleng-actions/gerrit-clone-action@main # latest
        id: clone
        with:
          host: ${{ matrix.gerrit }}
          path-prefix: "./${{ matrix.gerrit }}"
          skip-archived: "true"
          # LF Broadband struggles with load and operations can timeout
          # threads: ${{ matrix.project == 'LF Broadband' && '1' || '4' }}
          threads: "4"
          clone-timeout: "600"
          retry-attempts: "5"
          retry-base-delay: "3.0"
          retry-max-delay: "60.0"
          use-https: "true"
          # Enable move-conflicting to ensure 100% repository availability
          # for comprehensive data mining and reporting purposes
          move-conflicting: "true"

      - name: "Clone info-master repository"
        shell: bash
        # yamllint disable rule:line-length
        run: |
          echo "🔗 Cloning info-master repository for additional context data"
          git clone "https://gerrit.linuxfoundation.org/infra/releng/info-master" ./info-master
          echo "✅ Info-master repository cloned successfully"
          echo "📁 Sample files:"
          find ./info-master -maxdepth 1 -name "*.yaml" | head -3
          echo "📂 Sample directories:"
          find ./info-master -maxdepth 1 -type d -name "gerrit.*" | head -3
        # yamllint enable rule:line-length

      - name: "Set up Python environment for ${{ matrix.project }}"
        # yamllint disable-line rule:line-length
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.11'

      - name: "Install Python dependencies"
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "Run comprehensive analytics for ${{ matrix.project }}"
        shell: bash
        env:
          JENKINS_HOST: ${{ matrix.jenkins }}
        run: |
          project="${{ matrix.project }}"
          echo "📊 Starting comprehensive analytics for $project"

          # Debug: Show Jenkins host if provided
          if [ -n "$JENKINS_HOST" ]; then
            echo "🔧 Jenkins integration enabled for: $JENKINS_HOST"
          else
            echo "ℹ️ No Jenkins host provided - Jenkins integration disabled"
          fi

          # Execute the comprehensive reporting system
          python3 generate_reports.py \
            --project "$project" \
            --repos-path "./${{ matrix.gerrit }}" \
            --config-dir "./configuration" \
            --output-dir "./reports" \
            --verbose

          echo "✅ Analytics completed successfully for $project"

      - name: "Debug artifact paths before upload"
        shell: bash
        run: |
          project="${{ matrix.project }}"
          echo "🔍 Debugging artifact paths for $project"

          echo "Current working directory:"
          pwd

          echo "Contents of ./reports/:"
          ls -la ./reports/ || echo "No reports directory found"

          echo "Contents of ./reports/$project/:"
          ls -la "./reports/$project/" \
            || echo "No project reports directory found"

          echo "Looking for clone manifest:"
          ls -la "./${{ matrix.gerrit }}/clone-manifest.json" \
            || echo "No clone manifest found"

          echo "All files in reports directory tree:"
          find ./reports -type f 2>/dev/null \
          || echo "No files found in reports"

      - name: "Upload clone manifest"
        if: always()
        # yamllint disable-line rule:line-length
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: clone-manifest-${{ matrix.project }}
          path: "./${{ matrix.gerrit }}/clone-manifest.json"
          retention-days: 14
          if-no-files-found: warn

      - name: "Upload gerrit clone log"
        if: always()
        # yamllint disable-line rule:line-length
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: gerrit-clone-log-${{ matrix.project }}
          path: "./${{ matrix.gerrit }}.log"
          retention-days: 14
          if-no-files-found: warn

      - name: "Upload analysis reports"
        if: always()
        # yamllint disable-line rule:line-length
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: reports-${{ matrix.project }}
          path: ./reports/${{ matrix.project }}/
          retention-days: 30
          if-no-files-found: error

      - name: "Publish report to gerrit-reports repository"
        if: success()
        env:
          REPORTS_TOKEN: ${{ secrets.GERRIT_REPORTS_PAT_TOKEN }}
          REPORTS_REPO: modeseven-lfit/gerrit-reports
          PROJECT_NAME: ${{ matrix.project }}
          PR_MODE: ${{ vars.REPORTS_PR_MODE || 'false' }}
        shell: bash
        # yamllint disable rule:line-length
        run: |
          set -euo pipefail

          if [ -z "${REPORTS_TOKEN}" ]; then
            echo "::error::GERRIT_REPORTS_PAT_TOKEN secret not set; cannot publish report."
            exit 1
          fi

          report_src="./reports/${PROJECT_NAME}/report.html"
          if [ ! -f "${report_src}" ]; then
            echo "::warning::No report.html found at ${report_src}; skipping publish."
            exit 0
          fi

          slug=$(echo "${PROJECT_NAME}" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//')
          echo "Resolved project slug: ${slug}"

          workdir="$(mktemp -d)"
          cd "${workdir}"

          echo "Cloning target repository"
          git clone --depth 1 "https://${REPORTS_TOKEN}@github.com/${REPORTS_REPO}.git" repo
          cd repo

          target_dir="projects/${slug}"
          mkdir -p "${target_dir}"
          cp "${GITHUB_WORKSPACE}/${report_src}" "${target_dir}/report.html"

          cat > "${target_dir}/.provenance.json" <<EOF
          {
            "project": "${PROJECT_NAME}",
            "slug": "${slug}",
            "source_run_id": "${GITHUB_RUN_ID}",
            "source_run_attempt": "${GITHUB_RUN_ATTEMPT}",
            "source_repo": "${GITHUB_REPOSITORY}",
            "generated_at_utc": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

          git config user.name "lf-releng-reports-bot"
          git config user.email "lf-releng+reports-bot@linuxfoundation.org"

          git add "${target_dir}/report.html" "${target_dir}/.provenance.json" || true

          if git diff --cached --quiet; then
            echo "No changes to commit for ${PROJECT_NAME}; skipping."
            exit 0
          fi

          commit_msg="chore: update report for ${PROJECT_NAME} (run ${GITHUB_RUN_ID})"
          echo "Committing: ${commit_msg}"
          git commit -m "${commit_msg}"

          if [ "${PR_MODE}" = "true" ]; then
            echo "PR_MODE enabled; creating branch and pull request."
            branch="update/${slug}/$(date -u +%Y%m%d%H%M%S)"
            git checkout -b "${branch}"
            git push origin "${branch}"

            create_resp=$(curl -sS -X POST \
              -H "Authorization: Bearer ${REPORTS_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPORTS_REPO}/pulls" \
              -d @- <<PRJSON
          {
            "title": "chore: update report for ${PROJECT_NAME}",
            "head": "${branch}",
            "base": "main",
            "body": "Automated update of report for ${PROJECT_NAME} from run ${GITHUB_RUN_ID}.",
            "maintainer_can_modify": true,
            "draft": false
          }
          PRJSON
            )

            pr_number=$(echo "${create_resp}" | jq -r '.number // empty')

            if [ -z "${pr_number}" ]; then
              echo "::error::Failed to create pull request. Response:"
              echo "${create_resp}"
              exit 1
            fi
            echo "Created PR #${pr_number}"

            merge_resp=$(curl -sS -X PUT \
              -H "Authorization: Bearer ${REPORTS_TOKEN}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${REPORTS_REPO}/pulls/${pr_number}/merge" \
              -d '{"merge_method":"squash"}' || true)

            merged=$(echo "${merge_resp}" | jq -r '.merged // false')
            if [ "${merged}" = "true" ]; then
              echo "Pull request #${pr_number} merged automatically."
            else
              echo "Pull request #${pr_number} not auto-merged (may require review or settings block)."
            fi
            exit 0
          fi

          echo "Direct push mode enabled; pushing to main with rebase/retry logic."
          for attempt in {1..5}; do
            set +e
            git pull --rebase origin main
            rc=$?
            set -e
            if [ $rc -ne 0 ]; then
              echo "Rebase attempt ${attempt} failed; retrying..."
              sleep $((attempt * 2))
              continue
            fi

            if git push origin HEAD:main; then
              echo "Report published successfully on attempt ${attempt}."
              exit 0
            else
              echo "Push attempt ${attempt} failed; retrying..."
              sleep $((attempt * 2))
            fi
          done

          echo "::error::Failed to push report after multiple attempts."
          exit 1
        # yamllint enable rule:line-length

  summary:
    name: "Generate Summary Report"
    needs: [verify, analyze]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      # Harden the runner used by this workflow
      # yamllint disable-line rule:line-length
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: 'audit'

      - name: "Download all analysis results"
        # yamllint disable-line rule:line-length
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: reports-*
          path: ./results

      - name: "Generate workflow summary"
        shell: bash
        run: |
          {
            echo "## 📊 Project Reports Summary"
            echo ""
            echo "**Workflow completed:** $(date -u)"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # Count results
          result_count=$(find ./results -name "reports-*" \
            -type d 2>/dev/null | wc -l)
          {
            echo "**Reports generated:** $result_count project(s) processed"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # List processed projects
          if [ -d "./results" ]; then
            echo "### 📊 Generated Reports:" >> "$GITHUB_STEP_SUMMARY"
            for result_dir in ./results/reports-*; do
              if [ -d "$result_dir" ]; then
                project_name=$(basename "$result_dir" | sed 's/reports-//')
                echo "- ✅ **$project_name**" >> "$GITHUB_STEP_SUMMARY"
              fi
            done
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "Job summary generated at run-time" >> "$GITHUB_STEP_SUMMARY"
